package com.kure.test.design;

/**
 * 一、六大原则
 * 1.1 开闭原则（Open Closed Principle，OCP）
 * 基本定义:软件实体应当对扩展开放，对修改关闭
 * （Software entities should be open for extension，but closed for modification）
 * 含义是：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求。
 * 1.2 里氏替换原则（Liskov Substitution Principle，LSP）
 * 基本定义：继承必须确保超类所拥有的性质在子类中仍然成立
 * 通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。
 * 1.3 依赖倒置原则（Dependence Inversion Principle，DIP）
 * 基本定义：高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象
 * 其核心思想是：要面向接口编程，不要面向实现编程。
 * 1.4 单一职责原则（Single Responsibility Principle，SRP）
 * 基本定义：规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分
 * 核心就是控制类的粒度大小、将对象解耦、提高其内聚性。
 * 1.5 接口隔离原则（Interface Segregation Principle，ISP）
 * 基本定义：客户端不应该被迫依赖于它不使用的方法
 *  |  一个类对另一个类的依赖应该建立在最小的接口上
 * 做法是将臃肿庞大的接口拆分成更小的和更具体的接口，不要对外暴露没有实际意义的接口。
 * 1.6 迪米特法则（Law of Demeter，LoD）最少知识原则（Least Knowledge Principle，LKP)
 * 基本定义：只与你的直接朋友交谈，不跟“陌生人”说话
 * 含义是：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立
 * 把这 6 个原则的首字母（里氏替换原则和迪米特法则的首字母重复，只取一个）联合起来就是：SOLID（稳定的）。
 * 合成复用原则（Composite Reuse Principle，CRP） 组合/聚合复用原则（Composition/Aggregate Reuse Principle，CARP）
 * 要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。
 * 继承实际上破坏了类的封装性，超类的方法可能会被子类修改。
 * 这 7 种设计原则是软件设计模式必须尽量遵循的原则
 * 开闭原则告诉我们要对扩展开放，对修改关闭；
 * 里氏替换原则告诉我们不要破坏继承体系；
 * 依赖倒置原则告诉我们要面向接口编程；
 * 单一职责原则告诉我们实现类要职责单一；
 * 接口隔离原则告诉我们在设计接口的时候要精简单一；
 * 迪米特法则告诉我们要降低耦合度；
 * 合成复用原则告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用。
 * 二、java的设计模式
 * • 创建型模式（5种）：工厂方法模式，抽象工厂模式，单例模式，建造者模式，原型模式。
 * • 结构型模式（7种）：适配器模式，装饰器模式，代理模式，外观模式，桥接模式，组合模式，享元模式。
 * • 行为型模式（11种）：策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。
 * 2.1创建型模式
 * • 单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。
 * • 原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。
 * • 工厂方法（FactoryMethod）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。
 * • 抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。
 * • 建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。
 * 主要特点是“将对象的创建与使用分离”
 * 2.2结构型模式
 * 结构型模式描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象。
 * 由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象结构型模式比类结构型模式具有更大的灵活性。
 * 代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。
 * 适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。
 * 桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现的，从而降低了抽象和实现这两个可变维度的耦合度。
 * 装饰（Decorator）模式：动态地给对象增加一些职责，即增加其额外的功能。
 * 外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。
 * 享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。
 * 组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。
 * 2.3行为型模式
 * 用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，它涉及算法与对象间职责的分配。
 * 行为型模式分为类行为模式和对象行为模式，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为。由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象行为模式比类行为模式具有更大的灵活性。
 * 行为型模式是 GoF 设计模式中最为庞大的一类，它包含以下 11 种模式。
 * 模板方法（Template Method）模式：定义一个操作中的算法骨架，将算法的一些步骤延迟到子类中，使得子类在可以不改变该算法结构的情况下重定义该算法的某些特定步骤。
 * 策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。
 * 命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。
 * 职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。
 * 状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。
 * 观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。
 * 中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。
 * 迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。
 * 访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。
 * 备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。
 * 解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。
 */
public class Observer {
}
