
#定义Nginx运行的用户和用户组
user  nobody;

#nginx进程数，建议设置为等于CPU总核心数
worker_processes  4;

#指定进程可以打开的最大描述符：数目
#工作模式与连接数上限
#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。
#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。
#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。
worker_rlimit_nofile 100000; 

#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]
error_log  /usr/local/nginx/logs/nginx_error.log  info;

#进程pid文件
#pid /usr/local/nginx/logs/nginx.pid;

events {
	#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型
	#是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。
	#补充说明：
	#与apache相类，nginx针对不同的操作系统，有不同的事件模型
	#A）标准事件模型
	#Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll
	#B）高效事件模型
	#Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。
	#Epoll：使用于Linux内核2.6版本及以后的系统。
	#/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。
	#Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。
	use epoll;
	
	#单个进程最大连接数（最大连接数=连接数*进程数）
    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。
    worker_connections  100000; 

	#keepalive超时时间。
    #keepalive_timeout 60;

    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。
    #分页大小可以用命令getconf PAGESIZE 取得。
    #[root@web001 ~]# getconf PAGESIZE
    #4096
    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。
    #client_header_buffer_size 4k;

    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。
    #open_file_cache max=65535 inactive=60s;

    #这个是指多长时间检查一次缓存的有效信息。
    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.
    #open_file_cache_valid 80s;

    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。
    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.
    #open_file_cache_min_uses 1;
    
    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.
    #open_file_cache_errors on;
}

#设定http服务器，利用它的反向代理功能提供负载均衡支持
http {
	#文件扩展名与文件类型映射表
    include       mime.types;
	
	#默认文件类型
    default_type  application/octet-stream;
	
	#默认编码
    #charset utf-8;
	
	#服务器名字的hash表大小
    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size 
	#总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size 
	#等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要 
	#增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.
    #server_names_hash_bucket_size 128;

    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，
	#不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。
    #client_header_buffer_size 32k;

    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。
    #large_client_header_buffers 4 64k;

    #设定通过nginx上传文件的大小
    client_max_body_size 100m;
	
	#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为on，
	#如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。
    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）
	#来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。
	sendfile        on;
	
	#开启目录列表访问，合适下载服务器，默认关闭
    #autoindex on;
	
	#此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用
	tcp_nopush     on;
	tcp_nodelay    on;
	
	#webnet相关配置，公司改造
    webnet_shared_memory_size 1024M;
	
	#长连接超时时间，单位是秒
    #keepalive_timeout 120;
	
	#负载均衡配置(报价引擎管理转发模块),如果实际投产过程中使用保持session的F5或者其它类似工具，此处可以不设置
	upstream xprice_ups {
		#使用ip_hash模式(一共4种模式)反向代理，可以解决session问题
		ip_hash;
        server 192.168.193.15:9080;
	}
		upstream ecas_ups {
		#使用ip_hash模式(一共4种模式)反向代理，可以解决session问题
		ip_hash;
        server 192.168.193.15:9081;
	}

	#负载均衡配置(ecas、公共组件模块),如果实际投产过程中使用保持session的F5或者其它类似工具，此处可以不设置

	
	#报价引擎管理转发虚拟主机的配置,如果实际投产过程中使用保持session的F5或者其它类似工具，此处可以不设置
	server {
		#虚拟主机监听端口
		listen       90;
		#虚拟主机服务名,可以为多个,用空格分开
		server_name  192.168.10.10;
		index index.html index.htm index.php;
		
		#对/进行反向代理
		location / {
            index  index.php index.html index.htm;
			#错误进行页面重定向
			error_page 405 =200 $uri;
        }
		
		#对/pe_manager进行反向代理
		location /pe_manager1 {
			#进行反向集群代理
            proxy_pass http://xprice_ups;
			#在网页操作请求时，报文头中会记录对外公布的ip:port,此配置表明服务器收到的头中此ip:port不发生变化
            proxy_set_header Host $host;
			#将前端真实ip写在定义的变量X-Real-IP中，以便后台获取真实前端ip
            proxy_set_header X-Real-IP $remote_addr;
			#配合X-Real-IP使用
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
	}
		
	
	#ecas、公共组件虚拟主机的配置,如果实际投产过程中使用保持session的F5或者其它类似工具，此处可以不设置
	server {
		#虚拟主机监听端口
		listen       85;
		#虚拟主机服务名,可以为多个,用空格分开
		server_name  192.168.10.10;
		index index.html index.htm index.php;
		
		#对/进行反向代理
		location / {
            index  index.php index.html index.htm;
			#错误进行页面重定向
			error_page 405 =200 $uri;
        }
		#对/ecas进行反向代理

		
	}

	#webnet相关反向代理
	server {
        #虚拟主机监听端口
		listen       81;
		#虚拟主机服务名,可以为多个,用空格分开
		server_name  192.168.193.14;
		index index.html index.htm index.php;
		
		#对/进行反向代理
		location / {
            index  index.php index.html index.htm;
			#错误进行页面重定向
			error_page 405 =200 $uri;
        }
		
        #对/ecas进行反向代理
		location /ecas {
		 proxy_redirect http://192.168.193.14:9080/ http://192.168.193.14:81/;
		proxy_redirect http://127.0.0.1:9080/ /;
            proxy_pass http://xprice_ups;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
		location /fqti {
		 proxy_redirect http://192.168.193.14:9080/ http://192.168.193.14:81/;
		 proxy_redirect http://127.0.0.1:9080/ /;
            proxy_pass http://xprice_ups;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
		location /publicService {
            proxy_pass http://xprice_ups;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
		#对/sds进行反向代理
        location /sds {
            proxy_pass http://xprice_ups;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
		#对/mds进行反向代理
        location /mds {
            proxy_pass http://xprice_ups;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
		#对/cds进行反向代理
        location /cds {
            proxy_pass http://xprice_ups;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

		
		location /webnet-stats {
            # activate channels statistics mode for this location
            webnet_channels_statistics;

            # query string based channel id
            webnet_channels_path               $arg_id;
        }

		location /pub {
            # activate publisher (admin) mode for this location
            webnet_publisher admin;

            # query string based channel id
            webnet_channels_path               $arg_id;
        }

		location ~ /poll/(.*) {
            # activate subscriber (streaming) mode for this location
            webnet_subscriber	polling;
			
            # positional channel path
            webnet_channels_path                   $1;
        }
		
		location ~ /pubws/(.*) {
            # activate subscriber (streaming) mode for this location
            webnet_subscriber websocket;

            # positional channel path
            webnet_channels_path                   $1;

			#是否允许发送消息
            webnet_websocket_allow_publish         on;
  
            #ping的间隔时间
  		    webnet_ping_message_interval           10s;
        }

        location ~ /ws/(.*) {
            # activate subscriber (streaming) mode for this location
            webnet_subscriber websocket;

            # positional channel path
            webnet_channels_path                   $1;
  
			#是否允许发送消息
            webnet_websocket_allow_publish         on;
  
            #ping的间隔时间
			webnet_ping_message_interval           10s;
		}
    }
}
